.TH v.net.iso 1 "" "GRASS 7.0.4" "Grass User's Manual"
.SH NAME
\fI\fBv.net.iso\fR\fR  \- Splits net by cost isolines.
.br
Splits net to bands between cost isolines (direction from center). Center node must be opened (costs >= 0). Costs of center node are used in calculation.
.SH KEYWORDS
vector, network, isolines
.SH SYNOPSIS
\fBv.net.iso\fR
.br
\fBv.net.iso \-\-help\fR
.br
\fBv.net.iso\fR [\-\fBg\fR] \fBinput\fR=\fIname\fR \fBoutput\fR=\fIname\fR  [\fBarc_layer\fR=\fIstring\fR]   [\fBarc_type\fR=\fIstring\fR[,\fIstring\fR,...]]   [\fBnode_layer\fR=\fIstring\fR]   [\fBarc_column\fR=\fIname\fR]   [\fBarc_backward_column\fR=\fIname\fR]   [\fBnode_column\fR=\fIname\fR]  \fBcenter_cats\fR=\fIrange\fR \fBcosts\fR=\fIinteger\fR[,\fIinteger\fR,...]  [\-\-\fBoverwrite\fR]  [\-\-\fBhelp\fR]  [\-\-\fBverbose\fR]  [\-\-\fBquiet\fR]  [\-\-\fBui\fR]
.SS Flags:
.IP "\fB\-g\fR" 4m
.br
Use geodesic calculation for longitude\-latitude locations
.IP "\fB\-\-overwrite\fR" 4m
.br
Allow output files to overwrite existing files
.IP "\fB\-\-help\fR" 4m
.br
Print usage summary
.IP "\fB\-\-verbose\fR" 4m
.br
Verbose module output
.IP "\fB\-\-quiet\fR" 4m
.br
Quiet module output
.IP "\fB\-\-ui\fR" 4m
.br
Force launching GUI dialog
.SS Parameters:
.IP "\fBinput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name of input vector map
.br
Or data source for direct OGR access
.IP "\fBoutput\fR=\fIname\fR \fB[required]\fR" 4m
.br
Name for output vector map
.IP "\fBarc_layer\fR=\fIstring\fR" 4m
.br
Arc layer
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI1\fR
.IP "\fBarc_type\fR=\fIstring[,\fIstring\fR,...]\fR" 4m
.br
Arc type
.br
Input feature type
.br
Options: \fIline, boundary\fR
.br
Default: \fIline,boundary\fR
.IP "\fBnode_layer\fR=\fIstring\fR" 4m
.br
Node layer
.br
Vector features can have category values in different layers. This number determines which layer to use. When used with direct OGR access this is the layer name.
.br
Default: \fI2\fR
.IP "\fBarc_column\fR=\fIname\fR" 4m
.br
Arc forward/both direction(s) cost column (number)
.IP "\fBarc_backward_column\fR=\fIname\fR" 4m
.br
Arc backward direction cost column (number)
.IP "\fBnode_column\fR=\fIname\fR" 4m
.br
Node cost column (number)
.IP "\fBcenter_cats\fR=\fIrange\fR \fB[required]\fR" 4m
.br
Category values
.br
Categories of centers (points on nodes) to which net will be allocated, layer for this categories is given by nlayer option
.IP "\fBcosts\fR=\fIinteger[,\fIinteger\fR,...]\fR \fB[required]\fR" 4m
.br
Costs for isolines
.SH DESCRIPTION
\fIv.net.iso\fR splits a network into bands between cost isolines
(distance from center). Center nodes must be opened (costs >= 0). The
costs of center nodes are used in the calculation.
.PP
Costs may be either line lengths, or attributes saved in a database
table. These attribute values are taken as costs of whole segments, not
as costs to traverse a length unit (e.g. meter) of the segment.
For example, if the speed limit is 100 km / h, the cost to traverse a
10 km long road segment must be calculated as
.br
length / speed = 10 km / (100 km/h) = 0.1 h.
.br
Supported are cost assignments for both arcs and nodes,
and also different costs for both directions of a vector line.
For areas, costs will be calculated along boundary lines.
.PP
The input vector needs to be prepared with \fIv.net operation=connect\fR
in order to connect points representing center nodes to the network.
.SH NOTES
Nodes and arcs can be closed using cost = \-1.
.PP
Nodes must be on the isolines.
.SH EXAMPLES
The map must contain at least one center (point) on the vector network
which can be patched into with v.net.
.PP
Isonetwork using distance:
.PP
.PP
Isonetwork using time:
.PP
.SS Subdivision of a network using distance:
.br
.nf
\fC
# Spearfish
# start node:
echo \(dq591280.5|4926396.0|1\(dq | v.in.ascii in=\- out=startnode
g.copy vect=roads,myroads
# connect point to network
v.net myroads points=startnode out=myroads_net op=connect thresh=200
# define iso networks using distance:
v.net.iso input=myroads_net output=myroads_net_iso center_cats=1\-100000 costs=1000,2000,5000
\fR
.fi
The network is divided into 4 categories:
.br
.nf
\fC
v.category myroads_net_iso option=report
# ... reports 4 categories:
#cat | distance from point in meters
#1          0 \- < 1000
#2       1000 \- < 2000
#3       2000 \- < 5000
#4             >= 5000
\fR
.fi
To display the result, run for example:
.br
.nf
\fC
g.region n=4928200 s=4922300 w=589200 e=596500
d.mon x0
d.vect myroads_net_iso col=blue   cats=1
d.vect myroads_net_iso col=green  cats=2
d.vect myroads_net_iso col=orange cats=3
d.vect myroads_net_iso col=magenta  cats=4
d.vect myroads_net col=red icon=basic/triangle fcol=green size=12 layer=2
\fR
.fi
.SS Subdivision of a network using traveling time:
Prepare the network as above:
.br
.nf
\fC
# Spearfish
# start node:
echo \(dq591280.5|4926396.0|1\(dq | v.in.ascii in=\- out=startnode
g.copy vect=roads,myroads
# connect point to network
v.net myroads points=startnode out=myroads_net op=connect thresh=200
\fR
.fi
Define costs as traveling time dependent on speed limits:
.br
.nf
\fC
# set up costs
# create unique categories for each road in layer 3
v.category in=myroads_net out=myroads_net_time opt=add cat=1 layer=3 type=line
# add new table for layer 3
v.db.addtable myroads_net_time layer=3 col=\(dqcat integer,label varchar(43),length double precision,speed double precision,cost double precision,bcost double precision\(dq
# copy road type to layer 3
v.to.db myroads_net_time layer=3 qlayer=1 opt=query qcolumn=label columns=label
# upload road length in miles
v.to.db myroads_net_time layer=3 type=line option=length col=length unit=miles
# set speed limits in miles / hour
v.db.update myroads_net_time layer=3 col=speed val=\(dq5.0\(dq
v.db.update myroads_net_time layer=3 col=speed val=\(dq75.0\(dq where=\(dqlabel=\(cqinterstate\(cq\(dq
v.db.update myroads_net_time layer=3 col=speed val=\(dq75.0\(dq where=\(dqlabel=\(cqprimary highway, hard surface\(cq\(dq
v.db.update myroads_net_time layer=3 col=speed val=\(dq50.0\(dq where=\(dqlabel=\(cqsecondary highway, hard surface\(cq\(dq
v.db.update myroads_net_time layer=3 col=speed val=\(dq25.0\(dq where=\(dqlabel=\(cqlight\-duty road, improved surface\(cq\(dq
v.db.update myroads_net_time layer=3 col=speed val=\(dq5.0\(dq where=\(dqlabel=\(cqunimproved road\(cq\(dq
# define traveling costs as traveling time in minutes:
# set forward costs
v.db.update myroads_net_time layer=3 col=cost val=\(dqlength / speed * 60\(dq
# set backward costs
v.db.update myroads_net_time layer=3 col=bcost val=\(dqlength / speed * 60\(dq
# define iso networks using traveling time:
v.net.iso input=myroads_net_time output=myroads_net_iso_time arc_layer=3 node_layer=2 arc_column=cost arc_backward_column=bcost center_cats=1\-100000 costs=1,2,5
\fR
.fi
To display the result, run for example:
.br
.nf
\fC
# add table with labels and coloring
v.db.addtable myroads_net_iso_time columns=\(dqcat integer,trav_time varchar(20),GRASSRGB varchar(11)\(dq
# labels
v.db.update map=myroads_net_iso_time layer=1 column=trav_time value=\(dq0 \- 1\(dq where=\(dqcat = 1\(dq
v.db.update map=myroads_net_iso_time layer=1 column=trav_time value=\(dq1 \- 2\(dq where=\(dqcat = 2\(dq
v.db.update map=myroads_net_iso_time layer=1 column=trav_time value=\(dq2 \- 5\(dq where=\(dqcat = 3\(dq
v.db.update map=myroads_net_iso_time layer=1 column=trav_time value=\(dq> 5\(dq where=\(dqcat = 4\(dq
# colors
# cats=1: blue
v.db.update map=myroads_net_iso_time layer=1 column=GRASSRGB value=\(dq000:000:255\(dq where=\(dqcat = 1\(dq
# cats=2: green
v.db.update map=myroads_net_iso_time layer=1 column=GRASSRGB value=\(dq000:255:000\(dq where=\(dqcat = 2\(dq
# cats=3: orange
v.db.update map=myroads_net_iso_time layer=1 column=GRASSRGB value=\(dq255:128:000\(dq where=\(dqcat = 3\(dq
# cats=4: magenta
v.db.update map=myroads_net_iso_time layer=1 column=GRASSRGB value=\(dq255:000:255\(dq where=\(dqcat = 4\(dq
# show results
g.region n=4928200 s=4922300 w=589200 e=596500
d.mon x0
d.vect myroads_net_iso_time layer=1 \-a rgb_col=GRASSRGB
d.vect myroads_net col=red icon=basic/triangle fcol=green size=12 layer=2
\fR
.fi
.SH SEE ALSO
\fI
d.path,
v.net,
v.net.alloc,
v.net.path,
v.net.salesman,
v.net.steiner,
v.patch
\fR
.SH AUTHOR
Radim Blazek, ITC\-Irst, Trento, Italy
.br
Documentation: Markus Neteler, Markus Metz
.PP
\fILast changed: $Date: 2014\-12\-24 15:44:33 +0100 (Wed, 24 Dec 2014) $\fR
.PP
Main index |
Vector index |
Topics index |
Keywords index |
Full index
.PP
© 2003\-2016
GRASS Development Team,
GRASS GIS 7.0.4 Reference Manual
